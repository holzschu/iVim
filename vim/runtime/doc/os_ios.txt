*os_ios.txt*	For Vim version 7.4.	Last change: 2017 Nov 29

			iVim REFERENCE MANUAL	by Terry Chou


							*ios* *iOS*

This file documents the particularities of the iOS port of Vim.

ACKNOWLEGEMENT

This project stands on the shoulders of two precendent projects:
1. Vim port from Applidium: https://github.com/applidium/Vim

Although it has been inactive for a while, it is a pioneer of porting Vim to 
iOS. Itself and its opened source code inspires many followers.

2. VimIOS - A port of Vim to iOS 9+: https://github.com/larki/VimIOS

Based on the above project, it includes many features to take advantage of 
the newer iOS systems. This project started from it.

==============================================================================

1. File system				|ios-file-system|
2. Font management			|ios-font-management|
3. Extended keyboard			|ios-extended-keyboard|
4. Multi-stage language support		|ios-multistage-language|
5. Share				|ios-share|
6. Settings				|ios-settings|
7. External keyboard			|ios-external-keyboard|
8. Integrated Exuberant Ctags		|ios-exuberant-ctags|
9. Miscellaneous			|ios-miscellaneous|

==============================================================================
1. File system				*ios-file-system*

For security purpose, an iOS app can only access files within its sandbox 
environment. Normally, user-generated contents are stored in the `Documents`
directory under its data container. Therefore, this directory is set as the 
default `$HOME` for iVim. You can find or create all the user-specific files 
under it.

The Inbox directory ~

Under the `Documents` directory, there would also be a subdirectory named 
`Inbox`. Its role is to save the files shared with iVim by other apps. As a 
result, the files in this directory are readonly. You cannot create files 
under it.

The file browser ~

Because iOS systems don't have any shell available, you cannot browse the 
file system via external Unix commands.
However, iVim comes with a `netrw` file browser plugin. You can type ":edit ."
to get started. It provides an intuitive way to navigate the file system 
structure. Type ":help netrw" to get the help on how to use it.

The Files app support ~

Newly added in iOS 11, the Files app provides a central place for users to
organize their documents. iVim adds support to it. You can now apply common
file operations such as copy, duplicate, move, create or delete easily to
files or directories under iVim's `Documents` directory.
iVim can be found under "Locations > On My ..." in Files.

Besides the file editing within its sandbox, iVim can edit text from other 
apps via |ios-share|.


==============================================================================
2. Font management			*ios-font-management*

There are two types of fonts are available: 

a. system fonts

Besides the fonts available in iOS, the font `Source Code Pro` is embedded 
into iVim.

b. user fonts

iVim also allows users to import and use their own fonts.
Currently, fonts of type `ttf` or `otf` are supported. You can copy them from 
other apps to iVim via the share extension. The imported fonts will be 
automatically moved into directory `Library/Fonts/`.

The font commands ~

iVim has added two commands to manipulate the fonts. |:ifont| is for listing 
available fonts and changing the current one. |:ideletefont| is for deleting 
user fonts. Type ":help :ifont" or ":help :ideletefont" for more information.

Note that only monospace fonts are well supported.


==============================================================================
3. Extended keyboard			*ios-extended-keyboard*

An efficient use of Vim requires quick symbol input. However, the iOS system 
keyboard 'hides' them into other pages to save the screen real-estate. 
Moreover, some necessary keys are just not available in iOS.

To offer a more productive input, iVim adds an extended keyboard.

The compact button ~

In order to cover as many keys as possible in limited space, compact buttons 
are used in the extended keyboard.
The key in the center of the button is the primary key, and a simple tapping 
will trigger its input. Some optional keys may circle around the primary one. 
To input an optional key, drag it towards the center and release. For example,
if you want to input the key sitting at the top left corner, you make a drag 
right and down. The start point doesn't really matter.

The Ctrl key ~

Some keys are sticky. For example, the Ctrl key needs to be held down while 
pressing other keys. Thus it is set up as a sticky key:

a. triggering it once will enter the one-off state. After inputting a `C-`
combination, it will restore automatically.

b. triggering it twice will make it into the held state. It will keep being
held until it is tapped again. This is good for continuous `C-` inputs.

c. tapping it in any of the above state will restore its state.

Hide and show ~ 

You can toggle the extended keyboard by one finger long pressing the screen. 
The extended keyboard will show at launch by default.


==============================================================================
4. Multi-stage language support		*ios-multistage-language*

iVim adds support to multistage input languages such as Chinese or Japanese.

During a multistage input session, the keys that have been input will be 
inserted at the cursor. The candidates will be listed at the top of the 
keyboard. When a candidate is confirmed, it will replace the existing keys 
and this session ends.

Pressing ESC will cancel current multistage input session and all input keys 
will be deleted.

Tapping on screen or pressing arrow keys will end current multistage input 
session and the existing keys will be confirmed as the result.

Note: The key pressings will be translated into normal ones if it is not in 
INSERT mode.


==============================================================================
5. Share				*ios-share*

Sharing makes iVim's editing power available to more apps. 

Importing ~

If an app supports sharing text files or selected text, you can find iVim in 
its share panel. See |share-with-ivim| and |copy-to-ivim|.

Through the document picker invoked by ":idocuments import", you can also 
import text files from iCloud Drive or other document providers. This way,
you don't have to leave iVim to do the importing.

The imported file or text will be opened in a new tab for further editing.

Exporting ~

You can invoke iVim's share panel via the command |:ishare|, therefore share 
files or text with other apps.

Editing in place ~

The document picker |:idocuments| also allows you to edit files directly in 
iCloud Drive or other document provider apps. All the modifications will be 
saved into the original files even though this is normally not allowed because 
they are in different sandbox environments.

Also see |open-in-ivim|.

Items in the share panel ~

a. Share with iVim					*share-with-ivim*

This item will share the selected text in the sharing app. When invoked, the
selected text will appear in a floating box for you to do some simple editing.
Tapping `Post` will open iVim and the text in a new buffer within a new tab.

b. Copy to iVim						*copy-to-ivim*

It will copy the shared file into the `Documents` directory. When invoked, it
will open iVim and the copied file in a new tab. Note that if there had been
a file with the same name as the shared one, it will be renamed to avoid the
conflict.

c. Open in iVim						*open-in-ivim*

It will open the shared file directly in iVim. In another word, it lets iVim
edit the target file in place. Note that it needs the sharing app's support
for this feature.

Note that supported font files are always copied for installation.

Type ":help :ishare" or ":help :idocuments" for more detailed information.


==============================================================================
6. Settings						*ios-settings*

Because there are scenarios where vim's options cannot cover, iVim also
provides some setting options in the system's Settings app.

Launch Option ~

This settings group allows users indicate launch arguments for vim.

a. Arguments
You can give the arguments in this field. When iVim launches, this line will 
be parsed and taken by vim as its command line arguments.

b. Always
This switch tells iVim about the term of validity of the launch arguments.
If YES, iVim will take the arguments every time it launches.
If NO, iVim will only launch with the arguments once, then remove them.

Hardware Keyboard ~

a. Map [caps lock] to
If you have an external hardware keyboard connected, you can map its less used
`caps_lock` key to either `esc` or `ctrl` in this option. Note that it has 
caveats as mentioned at g. in |ios-external-keyboard|.

b. Enable [alt] Mapping
When enabled, it will map keystrokes with modifier `alt` to |<A-| chords in 
iVim. Otherwise, they will be handled by iOS system for extended symbols 
input.


==============================================================================
7. External keyboard				*ios-external-keyboard*

iVim supports the external hardware keyboard. You can connect the keyboard to
your iOS device and start typing in iVim.

a. besides the `ctrl` key chords |<C-|, the `command` key chords |<D-| are
now at your disposal.

b. chords `<D-s>`, `<D-h>` and `<D-.>` are reserved by iOS system.

c. by default, the `alt` key is preserved to input the extended symbols.
But you can enable `alt` key mapping in |ios-settings| to map it to the |<A-| 
chords handled by iVim.

d. special keys `esc`, `arrows`, `tab` and `enter` combined with modifier keys 
`ctrl`, `command`, `alt` and `shift` respectively are supported. However, 
`<C-CR>` is not working now.

e. function keys such as `F1` is not available due to the API limitation.

f. multiple modifiers chords such as `<D-C->` are not supported.

g. you can map `caps_lock` key to either `esc` or `ctrl` in |ios-settings|.
Note that due to the API limitation, only English keyboards are supported and 
will be disabled otherwise; after mapped, the default `alt` extended symbol 
input will be ignored; for an alternative to extended symbol input, you may 
refer to |digraph|; however, the `alt` mapping mentioned in c. will still work 
if enabled.


==============================================================================
8. Integrated Exuberant Ctags			*ios-exuberant-ctags*

Exuberant Ctags |Exuberant_ctags| is a great tool to generate tags for
programming languages. Its resulting tags are directly supported by vim. 

For better source code browsing experience, iVim integrates Exuberant Ctags
into its own environment. You can use it like the shell command via the Ex 
command |:ictags|.

Also, the integrated Exuberant Ctags shares the home directory with iVim. You
can put your `.ctags` config file under it and ctags will read it every time
it is invoked.

Type ":help :ictags" for details about the command.


==============================================================================
9. Miscellaneous			*ios-miscellaneous* *ios-misc*

Touch support ~

iVim adds support to basic touch gestures to make operations more intuitive 
and efficient.

a. Single tapping is like mouse left click on computers: it can change cursor 
position, window or select specific tab.

b. Single finger dragging can select text within a window, or resize a window 
when the fingers are on its status bar.

c. Two fingers dragging will scroll text in a window.

d. While one finger long pressing toggles the extended keyboard, two fingers
long pressing hides the system keyboard, and a single tap to bring it back.

Autosave ~

Because of the mechanism of terminating apps in iOS, iVim won't save opened 
files automatically. All unsaved changes will be lost when iVim terminates.


 vim:tw=78:ts=8:ft=help:norl
