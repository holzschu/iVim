*ios_commands.txt*	For Vim version 7.4	Last change: 2018 Mar 17

			iVim REFERENCE MANUAL	by Terry Chou

						*ios-commands* *icommands*

This file describes the details of the ex commands added by iVim to support 
its features.

1. Font Management		|font-management-icommands|
2. Share			|share-icommands|
3. Exuberant Ctags		|ctags-icommand|
4. Open URL			|open-url-icommand|

==============================================================================
1. Font Management				*font-management-icommands*

iVim adds two commands to assist the font management |ios-font-management|.

:ifo[nt] [fnum|fname] [fsize]				*:ifo* *:ifont*
		Without arguments, it shows all available fonts. Example: 

			*1	s	SourceCodePro-Regular	14.0 ~
			2	s	Menlo-Regular ~
			3	u	LucidaConsole ~

		The first column shows the order number of each font. The 
		currently used font has a `*` prepended to its number. The
		second column is the type indicator of the font:
			s  system font
			u  user font

		The third column stands for the font name. Also, the current
		font will have an extra column indicating its size. After
		new fonts are imported or existing ones deleted, this list
		will change accordingly.

		To set the current font, give the font number or font name as
		the argument. Example: >
			:ifont 3		"set the font to LucidaConsole
			:ifont Menlo-Regular	"set the font to Menlo-Regular
			:ifont Sou		"set the font to
						"SourceCodePro-Regular
<		Prefix can be given as the font name, the first matched font
		will be set.
		After the font number or name, a number can be given to set
		the font size at the same time. Example: >
			:ifont 3 12		"set the font to LucidaConsole
						"and to size 12.0
<		If the font size is not an integer, its fractional part will 
		be cut.
		You can use `_` as the font name to indicate that you want to
		keep the current font. Example: >
			:ifont _ 12		"keep the current font and set
						"its size to 12.0
<
		Note: the font setting of |:ifont| is temporary, it will 
		change back to the default one at next app launch. To set the 
		font permanently, add `set guifont={fname}:h{fsize}` into 
		vimrc.

:idel[etefont] [fnum|fname]				*:idel* *:ideletefont*
		Like |:ifont|, it shows all available fonts when no arguments
		are following.

		To delete a font, indicate the font number or font name as the
		target. Example: >
			:idel 3			"delete font LucidaConsole
			:idel Luc		"delete font LucidaConsole
<		If the current font is deleted, the first system font will be
		used.

		Note that only user fonts can be deleted.


==============================================================================
2. Share						*share-icommands*

iVim has two commands for sharing |ios-share|.

:[range]ish[are] [fname]				*:ish* *:ishare*
		Share files or text with other apps via the share extension.
		
		When [range] is given, text of lines in it of current buffer
		will be shared. Example: >
			:3,8ishare		"share text of line 3 thro 8
<
		Otherwise, the file represented by [fname] will be shared: >
			:ishare todo		"share file `todo` under 
						"current directory
			:ishare			"share file of current window 
<
		Note: only one file can be shared at a time.

:idoc[uments] [open|import]				*:idoc* *:idocuments*
		Pick documents from iCloud Drive or other document provider
		apps via the document picker.

		When the option is `open` or omitted, the picked document will
		be edited in place, meaning that the modifications will be
		saved back to the original document directly. Example: >
			:idoc			"open the document picker
						"and edit the picked file
						"in place
<		If the option is `import`, the picked document will be copied
		into iVim's `Documents` directory and opened for further
		editing. 

		Note: the imported file will be renamed if there has been 
		a file already possesses that name.


==============================================================================
3. Exuberant Ctags					*ctags-icommand*

iVim offers one command to use the integrated Exuberant Ctags
|ios-exuberant-ctags|.

:ic[tags] {options} [fname]				*:ic* *:ictags*
		Run the integrated Exuberant Ctags like the shell command.
		
		Examples: >
			:ictags --help		"show help info of ctags
			:ictags -R .		"generate tags recusively
						"for files under current
						"working directory
<
		Also, it supports vim |wildcards| in file or directory names.
		Example: >
			:ictags *.c *.h		"generate tags for all .c and
						".h files under current dir
<
		Note: option 'fileignorecase' is on by default, it will ignore
		case in file names when expanding them.

		After the tags are generated, you can browse the codebase 
		easily by |tags| navigation commands.

		Note: big projects may take some time to finish.


==============================================================================
4. Open URL						*open-url-icommand*

iVim adds one command to support the URL scheme opening |ios-open-url|.

:io[penurl] {url}					*:io* *:iopenurl*
		Open the {url} to invoke the iOS URL scheme workflow.

		Example: >
			:io https://www.example.com/search?q={@*%[Q}
<
		It will launch Safari and open the site "www.example.com" and
		do a search with the contents in the clipboard as the query.
		
		Note that it opens only one URL at a time.

Variable token ~

You need to use variable tokens to include useful info into an URL. The format
for a variable token is "{expr%[encode}". 

a. the "{" and "}" are the opening and closing delimiter respectively. 

As a result, they need to be backslash-escaped if you want to use them 
literally in the URL. Note that nested token is not supported.

b. the "expr" is a vim |expression| which will be replaced with its value when 
the whole URL is opened.

This expression will be evaluated by vim and errors will be feedback if it is
invalid. Note a) only expressions with value type "string" and "number" are
supported. b) tokens are evaluated one by one from left to right.

c. the "%[" is the indicator for a following URL encoding type.

d. the "encode" is the URL encoding type which is explained in details below.

Backslash escape ~

Sometimes you need to put certain characters literally into an URL. You can 
put a backslash character before each to achieve this. For example, "\{expr\}"
will be treated literally rather than a variable token.

Because of its special meaning, a literal backslash always needs to be 
backslash escaped, e.g. "\\".

URL encoding ~

Certain characters in an URL need to be percent encoded for a successful
opening. Moreover, in different parts of an URL, the characters need encoding
differ. Therefore, iVim provides an URL encoding type to help with this.

A typical URL skeleton is 
>
	scheme://user:password@host:port/path?query#fragment
<
The following encoding types are available:

	U:	indicates encoding for "user" part
	PW:	"password" part
	H:	"host" part
	PT:	"path" part
	Q:	"query" part, it is the default
	F:	"fragment" part

For example, if you will include a variable token into the "host" part, you
need to indicate it as "{expr%[H}". Then iVim will encode its value for the
specific part automatically. Omitting the encoding part, e.g. "{expr}", will 
encode it for the default "query" part. Note that they are case insensitive.

Debug errors ~

iVim provides some debug errors if you try to open an URL with problems.

"token open character { expected":
	a closing delimiter is encountered before an opening one.
"token close character } expected": 
	one opening delimiter is expecting a closing one but none given.
"nested token not allowed":
	there is a variable token inside another one.
"unfinished character escaping":
	there is a backslash at the end of the URL.
"invalid path: ...":
       	the given string is invalid for an URL.
"failed to open URL: ...":
       	the system failed to open the given URL.
	
If the position of the problem can be located in the URL, it will be 
highlighted as ">...<".


 vim:tw=78:ts=8:ft=help:norl:
